diff --git a/src/kem/kem.c b/src/kem/kem.c
index b03da5db..65b3a3a4 100644
--- a/src/kem/kem.c
+++ b/src/kem/kem.c
@@ -2,6 +2,8 @@
 
 #include <assert.h>
 #include <stdlib.h>
+#include <threads.h>
+#include <time.h>
 #if defined(_WIN32)
 #include <string.h>
 #define strcasecmp _stricmp
@@ -466,11 +468,105 @@ OQS_API OQS_KEM *OQS_KEM_new(const char *method_name) {
 	}
 }
 
+// Mutex to protect file access
+mtx_t keygen_mtx;
+void register_keygen_mtx(void) {
+    if(mtx_init(&keygen_mtx, mtx_plain) != thrd_success)
+	{
+		perror("Failed to initialize keygen mutex");
+		exit(EXIT_FAILURE);
+	}
+}
+
+// Open log for keygen
+FILE *fp_keygen = NULL;
+void open_keygen_log(void) {
+	fp_keygen = fopen("log_client_oqskeygen_us.csv", "w");
+	if (fp_keygen == NULL) {
+		perror("Unable to open file");
+		mtx_unlock(&keygen_mtx);
+		exit(EXIT_FAILURE);
+	}
+}
+
 OQS_API OQS_STATUS OQS_KEM_keypair(const OQS_KEM *kem, uint8_t *public_key, uint8_t *secret_key) {
 	if (kem == NULL) {
 		return OQS_ERROR;
 	} else {
-		return kem->keypair(public_key, secret_key);
+		// Get start time
+		struct timespec start;
+		if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Execute the function
+		OQS_STATUS status = kem->keypair(public_key, secret_key);
+
+		// Get end time
+		struct timespec end;
+		if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Calculate the elapsed time in microseconds
+		int64_t time_taken;
+		time_taken = (end.tv_sec - start.tv_sec) * 1000000;
+		time_taken += (end.tv_nsec - start.tv_nsec) / 1000;
+
+		// Lock the mutex before writing to the file
+		{
+			static once_flag flag = ONCE_FLAG_INIT;
+			call_once(&flag, register_keygen_mtx);
+		}
+		if(mtx_lock(&keygen_mtx) != thrd_success)
+		{
+			perror("Failed to lock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		// Open file in write mode
+		{
+			static once_flag flag = ONCE_FLAG_INIT;
+			call_once(&flag, open_keygen_log);
+		}
+
+		// Write the execution time to the CSV file
+		fprintf(fp_keygen, "%ld\r\n", time_taken);
+		fflush(fp_keygen);
+
+		// Unlock the mutex after writing
+		if(mtx_unlock(&keygen_mtx) != thrd_success)
+		{
+			perror("Failed to unlock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		return status;
+	}
+}
+
+// Mutex to protect file access
+mtx_t encaps_mtx;
+void register_encaps_mtx(void) {
+    if(mtx_init(&encaps_mtx, mtx_plain) != thrd_success)
+	{
+		perror("Failed to initialize encaps mutex");
+		exit(EXIT_FAILURE);
+	}
+}
+
+// Open log for encaps
+FILE *fp_encaps = NULL;
+void open_encaps_log(void) {
+	fp_encaps = fopen("log_server_oqsencaps_us.csv", "w");
+	if (fp_encaps == NULL) {
+		perror("Unable to open file");
+		mtx_unlock(&encaps_mtx);
+		exit(EXIT_FAILURE);
 	}
 }
 
@@ -478,7 +574,80 @@ OQS_API OQS_STATUS OQS_KEM_encaps(const OQS_KEM *kem, uint8_t *ciphertext, uint8
 	if (kem == NULL) {
 		return OQS_ERROR;
 	} else {
-		return kem->encaps(ciphertext, shared_secret, public_key);
+		// Get start time
+		struct timespec start;
+		if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Execute the function
+		OQS_STATUS status = kem->encaps(ciphertext, shared_secret, public_key);
+
+		// Get end time
+		struct timespec end;
+		if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Calculate the elapsed time in microseconds
+		int64_t time_taken;
+		time_taken = (end.tv_sec - start.tv_sec) * 1000000;
+		time_taken += (end.tv_nsec - start.tv_nsec) / 1000;
+
+		// Lock the mutex before writing to the file
+		{
+			static once_flag flag = ONCE_FLAG_INIT;
+			call_once(&flag, register_encaps_mtx);
+		}
+		if(mtx_lock(&encaps_mtx) != thrd_success)
+		{
+			perror("Failed to lock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		// Open file in write mode
+		{
+			static once_flag flag = ONCE_FLAG_INIT;
+			call_once(&flag, open_encaps_log);
+		}
+
+		// Write the execution time to the CSV file
+		fprintf(fp_encaps, "%ld\r\n", time_taken);
+		fflush(fp_encaps);
+
+		// Unlock the mutex after writing
+		if(mtx_unlock(&encaps_mtx) != thrd_success)
+		{
+			perror("Failed to unlock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		return status;
+	}
+}
+
+// Mutex to protect file access
+mtx_t decaps_mtx;
+void register_decaps_mtx(void) {
+    if(mtx_init(&decaps_mtx, mtx_plain) != thrd_success)
+	{
+		perror("Failed to initialize decaps mutex");
+		exit(EXIT_FAILURE);
+	}
+}
+
+// Open log for decaps
+FILE *fp_decaps = NULL;
+void open_decaps_log(void) {
+	fp_decaps = fopen("log_client_oqsdecaps_us.csv", "w");
+	if (fp_decaps == NULL) {
+		perror("Unable to open file");
+		mtx_unlock(&decaps_mtx);
+		exit(EXIT_FAILURE);
 	}
 }
 
@@ -486,7 +655,57 @@ OQS_API OQS_STATUS OQS_KEM_decaps(const OQS_KEM *kem, uint8_t *shared_secret, co
 	if (kem == NULL) {
 		return OQS_ERROR;
 	} else {
-		return kem->decaps(shared_secret, ciphertext, secret_key);
+		// Get start time
+		struct timespec start;
+		if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Execute the function
+		OQS_STATUS status = kem->decaps(shared_secret, ciphertext, secret_key);
+
+		// Get end time
+		struct timespec end;
+		if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
+		{
+			perror("Failed to get current time");
+			exit(EXIT_FAILURE);
+		}
+
+		// Calculate the elapsed time in microseconds
+		int64_t time_taken;
+		time_taken = (end.tv_sec - start.tv_sec) * 1000000;
+		time_taken += (end.tv_nsec - start.tv_nsec) / 1000;
+
+		// Lock the mutex before writing to the file
+		static once_flag flag = ONCE_FLAG_INIT;
+		call_once(&flag, register_decaps_mtx);
+		if(mtx_lock(&decaps_mtx) != thrd_success)
+		{
+			perror("Failed to lock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		// Open file in write mode
+		{
+			static once_flag flag = ONCE_FLAG_INIT;
+			call_once(&flag, open_decaps_log);
+		}
+
+		// Write the execution time to the CSV file
+		fprintf(fp_decaps, "%ld\r\n", time_taken);
+		fflush(fp_decaps);
+
+		// Unlock the mutex after writing
+		if(mtx_unlock(&decaps_mtx) != thrd_success)
+		{
+			perror("Failed to unlock mutex");
+			exit(EXIT_FAILURE);
+		}
+
+		return status;
 	}
 }
 
diff --git a/src/sig/sig.c b/src/sig/sig.c
index 48a710e8..32c9e7a5 100644
--- a/src/sig/sig.c
+++ b/src/sig/sig.c
@@ -2,6 +2,8 @@
 
 #include <assert.h>
 #include <stdlib.h>
+#include <threads.h>
+#include <time.h>
 #if defined(_WIN32)
 #include <string.h>
 #define strcasecmp _stricmp
@@ -763,20 +765,170 @@ OQS_API OQS_STATUS OQS_SIG_keypair(const OQS_SIG *sig, uint8_t *public_key, uint
 	}
 }
 
+// Mutex to protect file access
+mtx_t sign_mtx;
+void register_sign_mtx(void) {
+    if(mtx_init(&sign_mtx, mtx_plain) != thrd_success)
+	{
+		perror("Failed to initialize sign mutex");
+		exit(EXIT_FAILURE);
+	}
+}
+
+// Open log for sign
+FILE *fp_sign = NULL;
+void open_sign_log(void) {
+	fp_sign = fopen("log_server_oqssign_us.csv", "w");
+	if (fp_sign == NULL) {
+		perror("Unable to open file");
+		mtx_unlock(&sign_mtx);
+		exit(EXIT_FAILURE);
+	}
+}
+
 OQS_API OQS_STATUS OQS_SIG_sign(const OQS_SIG *sig, uint8_t *signature, size_t *signature_len, const uint8_t *message, size_t message_len, const uint8_t *secret_key) {
-	if (sig == NULL || sig->sign(signature, signature_len, message, message_len, secret_key) != OQS_SUCCESS) {
+	if (sig == NULL) {
 		return OQS_ERROR;
-	} else {
-		return OQS_SUCCESS;
+	}
+
+	// Get start time
+	struct timespec start;
+	if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
+	{
+		perror("Failed to get current time");
+		exit(EXIT_FAILURE);
+	}
+
+	// Execute the function
+	if(sig->sign(signature, signature_len, message, message_len, secret_key) != OQS_SUCCESS) {
+		return OQS_ERROR;
+	}
+
+	// Get end time
+	struct timespec end;
+	if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
+	{
+		perror("Failed to get current time");
+		exit(EXIT_FAILURE);
+	}
+
+	// Calculate the elapsed time in microseconds
+	int64_t time_taken;
+	time_taken = (end.tv_sec - start.tv_sec) * 1000000;
+	time_taken += (end.tv_nsec - start.tv_nsec) / 1000;
+
+	// Lock the mutex before writing to the file
+	{
+		static once_flag flag = ONCE_FLAG_INIT;
+		call_once(&flag, register_sign_mtx);
+	}
+	if(mtx_lock(&sign_mtx) != thrd_success)
+	{
+		perror("Failed to lock mutex");
+		exit(EXIT_FAILURE);
+	}
+
+	// Open file in write mode
+	{
+		static once_flag flag = ONCE_FLAG_INIT;
+		call_once(&flag, open_sign_log);
+	}
+
+	// Write the execution time to the CSV file
+	fprintf(fp_sign, "%ld\r\n", time_taken);
+	fflush(fp_sign);
+
+	// Unlock the mutex after writing
+	if(mtx_unlock(&sign_mtx) != thrd_success)
+	{
+		perror("Failed to unlock mutex");
+		exit(EXIT_FAILURE);
+	}
+
+	return OQS_SUCCESS;
+}
+
+// Mutex to protect file access
+mtx_t verify_mtx;
+void register_verify_mtx(void) {
+    if(mtx_init(&verify_mtx, mtx_plain) != thrd_success)
+	{
+		perror("Failed to initialize verify mutex");
+		exit(EXIT_FAILURE);
+	}
+}
+
+// Open log for verify
+FILE *fp_verify = NULL;
+void open_verify_log(void) {
+	fp_verify = fopen("log_client_oqsverify_us.csv", "w");
+	if (fp_verify == NULL) {
+		perror("Unable to open file");
+		mtx_unlock(&verify_mtx);
+		exit(EXIT_FAILURE);
 	}
 }
 
 OQS_API OQS_STATUS OQS_SIG_verify(const OQS_SIG *sig, const uint8_t *message, size_t message_len, const uint8_t *signature, size_t signature_len, const uint8_t *public_key) {
-	if (sig == NULL || sig->verify(message, message_len, signature, signature_len, public_key) != OQS_SUCCESS) {
+	if (sig == NULL) {
+		return OQS_ERROR;
+	}
+
+	// Get start time
+	struct timespec start;
+	if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
+	{
+		perror("Failed to get current time");
+		exit(EXIT_FAILURE);
+	}
+
+	// Execute the function
+	if(sig->verify(message, message_len, signature, signature_len, public_key) != OQS_SUCCESS) {
 		return OQS_ERROR;
-	} else {
-		return OQS_SUCCESS;
 	}
+
+	// Get end time
+	struct timespec end;
+	if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
+	{
+		perror("Failed to get current time");
+		exit(EXIT_FAILURE);
+	}
+
+	// Calculate the elapsed time in microseconds
+	int64_t time_taken;
+	time_taken = (end.tv_sec - start.tv_sec) * 1000000;
+	time_taken += (end.tv_nsec - start.tv_nsec) / 1000;
+
+	// Lock the mutex before writing to the file
+	{
+		static once_flag flag = ONCE_FLAG_INIT;
+		call_once(&flag, register_verify_mtx);
+	}
+	if(mtx_lock(&verify_mtx) != thrd_success)
+	{
+		perror("Failed to lock mutex");
+		exit(EXIT_FAILURE);
+	}
+
+	// Open file in write mode
+	{
+		static once_flag flag = ONCE_FLAG_INIT;
+		call_once(&flag, open_verify_log);
+	}
+
+	// Write the execution time to the CSV file
+	fprintf(fp_verify, "%ld\r\n", time_taken);
+	fflush(fp_verify);
+
+	// Unlock the mutex after writing
+	if(mtx_unlock(&verify_mtx) != thrd_success)
+	{
+		perror("Failed to unlock mutex");
+		exit(EXIT_FAILURE);
+	}
+
+	return OQS_SUCCESS;
 }
 
 OQS_API void OQS_SIG_free(OQS_SIG *sig) {
